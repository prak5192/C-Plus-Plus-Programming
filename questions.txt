================================================================================
► What is OOP (Object-oriented programming)?
SoL:
    Object oriented programming is method of programming where a 
system is considered as a collection of objects that interact 
together to accomplish certain tasks. Objects are entities that 
encapsulate data and procedures that operate on the data.

In OOPS first a concept known as "Object oriented analysis(OOA)" 
is used to specify the objects in term of real world requirements, 
their behaviour and interactions required. The next concept would 
be the "Object oriented design(OOD)" that converts these realtime 
requirements as a hierarchy of objects in terms of software 
development requirement. Finally OOPS is used to implement the 
requirements using the C++ programming language.

The main purpose of object oriented programming is to simplify the 
design, programming and most importantly debugging a program. So 
to modify a particular data, it is easy to identify which function 
to use. To add additional features it is easy to identify where 
to add functions and its related data.

Following are the basic elements of Object oriented programming(OOPS)

    1. Object
    2. Classes
    3. Inheritance
    4. Dynamic Binding
    5. Polymorphism
    6. Message passing
    7. Encapsulation

================================================================================
► How is Objects used in OOPs concept of C++?
Sol:
    Objects are instance of a class, that interact with each other 
at runtime. In OOPs, Objects are decalred at the end of the class 
definition or after the "}" braces. They can be of any type based 
on its declaration
Example:

#include <iostream.h>
class Cube
{
    public:
        int cub( val){
        r = val*val*val;
        return r; 
        }
        void show(){
            cout << "The cube is::" << r;
        }   

    private:
        int val, r;
}x;

void main()
{
    Cube x;
    x.cub(2);
    x.show();
}

Result:

    The cbe is :: 8

In the above example "x" is an object of the class "Cube" used to access 
the functions inside the class. 

================================================================================
► How are Classes used in OOPs concept of C++?
Sol:
    Classes has the data and its associated function wrapped in it. 
Classes are also known as a collection of similar objects or objects of 
same type. In the OOPs concept the variables declared inside a class are 
known as "Data Members" and the functions are known as "Member Functions".
Syntax:

   class class-name
    {
      private:
          variable declaration;
          function declaration;
      public:
          variable declaration;
          function declaration;
    };

Example:

#include <iostream.h>
class Square{
     public:
        int area( side)
        { 
            a =side*side;
            return a; 
        }
        void show()
        {
            cout << "The area is::" << a;
        }
        private:
            int side, a;
}x;

void main()
{
      Square x;
      x.area(10);
      x.show();
}

Result:

    The area is:: 100

In the above OOPs example the class "square" has functions "area" 
and "show" to calculate the area of the square and to display the 
area. so all these are objects that are related to the class 
"Square". 

================================================================================
► How is Inheritance used in OOP's concept of C++?
Sol:
    Inheritance is a method by which new classes are created or 
derived from the existing classes. Using Inheritance some qualities 
of the base classes are added to the newly derived class, apart from 
its own features The advantage of using "Inheritance" is due to 
the reusability of classes in multiple derived classes. 
The ":" operator is used for inherting a class.

The following table lists the visibility of the base class members 
in the derived classes.
Base class visibility                           Derived class visibility
              Public derivation.  Private derivation.   Protected derivation.
Private       Not inherited       Not inherited         Not inherited
Protected     Protected           Private               Protected
Public        Public              Private               Protected

Following are the different types of inheritance followed in C++.

    1. Single inheritance
    2. Multiple inheritance
    3. Hierarchial inheritance
    4. Multilevel inheritance
    5. Hybrid inheritance

Example:

#include <iostream.h>
class Value 
{
   protected:
        int val;
   public:
        void set_values (int a)
        { 
            val=a;
        }
};

class Square: public Value 
{
    public:
        int square()
        { 
            return (val*val); 
        }
};

int main () 
{
    Square sq;
    sq.set_values (5);
    cout << "The square of 5 is::" << sq.square() << endl;
    return 0;
}

Result:
    The square of 5 is:: 25
In the above example the object "val" of class "Value" is 
inherited in the derived class "Square". 

================================================================================
► How Dynamic Binding is used in OOPs concept of C++? 
Sol:
    In OOPs Dynamic Binding refers to linking a procedure call to the 
code that will be executed only at run time. The code associated with the 
procedure in not known until the program is executed, which is also 
known as late binding.
Example:

#include <iostream.h>
int Square(int x)
{ 
    return x*x; 
}
int Cube(int x)
{ 
    return x*x*x; 
}
int main()
{
    int x =10;
    int choice;
    do
    {
        cout << "Enter 0 for square value, 1 for cube value: ";
        cin >> choice;
    } while (choice < 0 || choice > 1);
 
    int (*ptr) (int);
    switch (choice)
    {
        case 0: 
            ptr = Square; 
            break;
        case 1: 
            ptr = Cube; 
            break;
    }
    cout << "The result is: " << ptr(x) << endl;
    return 0;
}


Result:

    Enter 0 for square value, 1 for cube value:0
    The result is:100

In the above OOPs example the functions "Square" and "Cube" are 
called only at runtime based on the value given for "choice". 
Then a pointer "ptr" is used to call the appropriate function 
to get the result.

================================================================================
► How is Polymorphism used in OOPs concept of C++?
Sol:
    Polymorphism is the ability of an object or reference to 
take many different forms at different instances. These are of two 
types one is the "compile time polymorphism" and other one is 
the "run-time polymorphism".

Compile time polymorphism:
==========================
In this method object is bound to the function call at the 
compile time itself.

Run time polymorphism:
========================
In this method object is bound to the function call only at the run time.

Example:

#include <iostream.h>
class Value 
{
    protected:
        int val;
        public:
        void set_values (int a)
        { 
            val=a;
        }
};
class Cube: public Value 
{   
    public:
        int cube()
        { 
            return (val*val*val); 
        }
};

int main () {
    Cube cb;
    Value * ptr = &cb;
    ptr->set_values (10);
    cout << "The cube of 10 is::" << cb.cube() << endl;
    return 0;
}

Result:
    The cube of 10 is:: 1000

In the above OOPs example "Cube" is a derived class of "Value". 
To implement polymorphism a pointer "ptr" is used to reference to the 
members of the class "Cube". This is an example for "Compile time 
polymorphism."  

================================================================================
► How is Encapsulation used in OOP's concept of C++? What is Data Abstraction?
Sol:
    Encapsulation is the method of combining the data and functions 
inside a class. This hides the data from being accessed from outside a class 
directly, only through the functions inside the class is able to access 
the information.

This is also known as "Data Abstraction", as it gives a clear separation 
between properties of data type and the associated implementation details. 
There are two types, they are "function abstraction" and "data abstraction". 
Functions that can be used without knowing how its implemented is function 
abstraction. Data abstraction is using data without knowing how the data 
is stored.

Example:

#include <iostream.h>
class Add 
{
    private:
        int x,y,r;
    public:
        int Addition(int x, int y)
        {
            r= x+y;
            return r;
        }
        void show( )
        { 
            cout << "The sum is::" << r << "\n";
        }
}s;

void main()
{
    Add s;
    s.Addition(10, 4);
    s.show();
}
Result:
    The sum is:: 14
In the above encapsulation example the integer values "x,y,r" of the class 
"Add" can be accessed only through the function "Addition". These integer 
values are encapsulated inside the class "Add".

================================================================================
► What is Single Inheritance OOP's concept in C++?
Sol:
    Single Inheritance is method in which a derived class has only 
one base class.
Example:

#include <iostream.h>
class Value 
{
    protected:
      int val;
    public:
      void set_values (int a)
        { val=a;}
};
class Cube: public Value 
{
    public:
     int cube()
       { return (val*val*val); }
};
int main () 
{
   Cube cub;
   cub.set_values (5);
   cout << "The Cube of 5 is::" << cub.cube() << endl;
   return 0;
}

Result:
    The Cube of 5 is:: 125

================================================================================
► What is Multiple Inheritance OOP's concept in C++?
Sol:
    Multiple Inheritance is a method by which a class is derived from 
more than one base class.
Example:

#include <iostream.h>
using namespace std;
class Square
{
    protected:
     int l;
    public:
     void set_values (int x)
      { l=x;}
};
class CShow 
{
    public:
     void show(int i);
};

void CShow::show (int i) 
{
    cout << "The area of the square is::" << i << endl;
}

class Area: public Square, public CShow
{
   public:
    int area()
      { return (l *l); }
};
int main () 
{
    Area r;
    r.set_values (5);
    r.show(r.area());
    return 0;
}

Result:
    The area of the square is:: 25

================================================================================
► What is Hierarchical Inheritance OOP's Concept in C++?
Sol:
    Hierarchical Inheritance is a method of inheritance where one 
or more derived classes is derived from common base class.

Example:

#include <iostream.h>
class Side
{
    protected:
      int l;
    public:
      void set_values (int x)
        { 
            l=x;
        }
};

class Square: public Side
{
    public:
      int sq()
      { 
        return (l *l); 
      }
};

class Cube:public Side
{
   public:
     int cub()
      { 
        return (l *l*l); 
      }
};

int main () 
{
    Square s;
    s.set_values (10);
    cout << "The square value is::" << s.sq() << endl;
    Cube c;
    c.set_values (20);
    cout << "The cube value is::" << c.cub() << endl;
    return 0;
}


Result:

    The square value is:: 100
    The cube value is::8000

In the above example the two derived classes "Square", "Cube" uses 
a single base class "Side". Thus two classes are inherited from a single 
class. This is the hierarchical inheritance OOP's concept in C++.
 
================================================================================
► What is "Multilevel Inheritance" OOP's concept in C++?
Sol:
    Multilevel Inheritance is a method where a derived class is 
derived from another derived class.
Example:

#include <iostream.h>
class mm
{
    protected:
      int rollno;
    public:
      void get_num(int a)
        { rollno = a; }
      void put_num()
        { cout << "Roll Number Is:\n"<< rollno << "\n"; }
};

class marks : public mm
{
    protected:
      int sub1;
      int sub2;
    public:
      void get_marks(int x,int y)
        {
           sub1 = x;
           sub2 = y;
        }
      void put_marks(void)
        {
          cout << "Subject 1:" << sub1 << "\n";
          cout << "Subject 2:" << sub2 << "\n";
        }
};
class res : public marks
{
     protected: 
       float tot;
     public:
       void disp(void)
          {
            tot = sub1+sub2;
            put_num();
            put_marks();
            cout << "Total:"<< tot;
          }
};

int main()
{
     res std1;
     std1.get_num(5);
     std1.get_marks(10,20);
     std1.disp();
     return 0;
}

Result:
   Roll Number Is:
   5
   Subject 1: 10
   Subject 2: 20
   Total: 30

In the above example, the derived function "res" uses the function 
"put_num()" from another derived class "marks", which just a level above. 
This is the multilevel inheritance OOP's concept in C++.

================================================================================
► What is "Hybrid Inheritance" OOP's Concept in C++?
Sol:
    "Hybrid Inheritance" is a method where one or more types of 
inheritance are combined together and used.
Example:

#include <iostream.h>
class mm
{
    protected:
      int rollno;
    public:
      void get_num(int a)
       { rollno = a; }
      void put_num()
       { cout << "Roll Number Is:"<< rollno << "\n"; }
};
class marks : public mm
{
   protected:
     int sub1;
     int sub2;
   public:
     void get_marks(int x,int y)
       {
         sub1 = x;
         sub2 = y;
       }
     void put_marks(void)
       {
          cout << "Subject 1:" << sub1 << "\n";
          cout << "Subject 2:" << sub2 << "\n";
      }
};

class extra 
{
    protected:
      float e;
    public:
    void get_extra(float s)
      {e=s;}
    void put_extra(void)
      { cout << "Extra Score::" << e << "\n";}
};

class res : public marks, public extra
{
   protected: 
     float tot;
   public:
     void disp(void)
       {
         tot = sub1+sub2+e; 
         put_num();
         put_marks();
         put_extra();
         cout << "Total:"<< tot;
       }
};

int main()
{
   res std1;
   std1.get_num(10);
   std1.get_marks(10,20);
   std1.get_extra(33.12);
   std1.disp();
   return 0;
}
Result:

   Roll Number Is: 10 
   Subject 1: 10
   Subject 2: 20
   Extra score:33.12
   Total: 63.12

In the above example the derived class "res" uses the function 
"put_num()". Here the "put_num()" function is derived first to 
class "marks". Then it is deriived and used in class "res". 
This is an example of "multilevel inheritance-OOP's concept". 
But the class "extra" is inherited a single time in the class "res", 
an example for "Single Inheritance". Since this code uses both 
"multilevel" and "single" inheritence it is an example of 
"Hybrid Inheritance".

================================================================================
► What is Function Overloading in C++?
Sol:
    Function Overloading is a method to define multiple functions 
with the same name. But different tasks are performed based on 
the number, type of arguments contained in that function.
Example:

#include <iostream.h>
int add(int, int);
double add( double , double );
int add(int , int , int );
int main()
  {
    cout << "Addition of 2 integers::" 
              <


Result:

   Addition of 2 integers::13 
   Addition of 2 double integers::25.7 
   Addition of 3 integers::30 

In the above example there are multiple "add" functions, but with 
different arguments, types. So based on the type and arguments 
the respective function is called.

================================================================================
► What is Operator Overloading in C++? 
Sol:

Operator Overloading is a method to define additional task or special 
meaning to an operator in refernce to an class. Operators that cannot 
be overloaded are class member access operator (.,.*), scope resolution 
operator "::", "sizeof" operator and conditional operator "?:".
Example:

#include <iostream.h>
using namespace std;
class space
{
     int x, y, z;
    public:
     void getdata(int a, int b, int c);
     void display(void);
     void operator-();
};
void space :: getdata(int a, int b, int c)
{ 
     x=a;
     y=b;
     z=c;
}
void space :: display(void)
{
     cout << x << "";
     cout << y << " ";
     cout << z << " ";
}
void space :: operator-()
{
     x=-x;
     y=-y;
     z=-z;
}
int main()
{
     space S;
     S.getdata(10, -20, 30);
     cout  << "Values before overloading:: " << "\n";
     S.display();
     cout << "\n";
     -S;
     cout << "Values after overloading:: " << "\n";
     S.display();
     return 0;
}


Result:

    Values before overloading::
     10-20 30
    Values after overloading::
     -10 20-30

In the above example the unary "-" operator is used to overload the o
bjects got using "getdata()" of the class space. Usually the unary "-" 
operator is changes the sign, but here it is done for the objects of 
an class "space".
This is operator overloading in C++.

================================================================================
► What is Virtual Functions in C++?
Sol:
    Virtual Function is a function that is declared within a base 
class and redefined in the derived class. Virtual functions are 
declared by preceding the class declaration with a keyword "virtual". 
When a virtual function is declared C++ decides to execute a function 
based on the type of object pointed by the base pointer and not on the 
type of pointer.
Example:

#include <iostream.h>
class Bclass
{
    public:
       void  disp() { cout  << " BASE BASE\n" ; }
       virtual void sh() { cout << "base base\n"; }
};

class Dclass : public Bclass
{
    public:
      void disp() { cout << "DERIVED DERIVED\n"; }
      void sh() { cout << "derived derived\n"; }
};
int main()
{
     Bclass B;
     Dclass D;
     Bclass *ptr;
     
     cout << "ptr points to base class\n" ;
     ptr =  &B;
     ptr->disp();
     ptr->sh();
   
     cout << "ptr points derived class\n";
     ptr = &D;
     ptr->disp();
     ptr->sh();
     return 0;
}

Result:

   ptr points to base class
   BASE BASE
   base base
   ptr points derived class
    BASE BASE
   derived derived

In the above example, the base ptr is used point the object D. Since the 
"sh()" function has a derived version in the form of a virtual function, 
it displays the base class version of "sh()".
 
================================================================================
► What is Exception Handling in C++?
Sol:
    Exception Handling provides a mechanism to detect and report an 
exceptional circumstance, so that corrective action can be taken to set 
right the error occurred. Error Handler in C++ consists of three major keywords 
namely try, throw and catch. The "try" block is a set of code which 
generates an exception which is thrown using the "throw" statement. 
The "catch" block is used to catch the exception and handles it appropriately.

Throw point
    Function that causes an exception.
try block
    Invokes a function that contains an exception.
catch block
    Catches and handles the exception.

Example:

#include <iostream.h>
int main()
 {
   int x,y;
   cout << "Enter values of x::";
   cin >> x;
   cout << "Enter values of y::";
   cin >> y;
   int r=x-y;
   try 
     {
      if ( r!=0)
       {
         cout << "Result of division is x/r:: " << x/r << "\n";
       }
      else
       {
         throw ( r);
       }
     }
   catch( int r)
      {
        cout << "Division by zero exception::
                     value of r is::" << r << "\n";
      }
   cout << "END";
   return 0;
 }


Result:

   Enter values of x::12
   Enter values of y::12
   Division by zero exception::value of r is::0

In the above example, when the value "x" is divided by "0" an exception 
is thrown. Using the "catch" statement the exception is caught. 
This is the Error Handler System in C++.

================================================================================
► What is namespace in C++?
Sol:
    Namespace is a new concept introduced by the ANSI C++ standards 
committee. For using identifiers it can be defined in the namespace 
scope as below.
Syntax:

   using namespace std;

In the above syntax "std" is the namespace where ANSI C++ standard 
class libraries are defined. Even own namespaces can be defined.
Syntax:

   namespace namespace_name
    {
      //Declaration of 
      // variables, functions, classes, etc.
    }  

Example:

#include <iostream.h>
using namespace std;
namespace Own
{
    int a=100;
}
int main()
{
    cout << "Value of a is:: " << Own::a;
    return 0;
}
Result:
 Value of a is:: 100

In the above example, a name space "Own" is used to assign a value 
to a variable. To get the value in the "main()" function the "::" 
operator is used.

================================================================================
► What is Type Casting in C++?
Sol:
    "Type Casting" is method using which a variable of one datatype is 
converted to another datatype, to do it simple the datatype is specified 
using parenthesis in front of the value.
Example:

#include <iostream.h>
using namespace std;
int main()
{
     short x=40;
     int y;
     y = (int)x;    
     cout << "Value of y is:: "<< y <<"\nSize is::"<< sizeof(y);
     return 0;
}  

Result:

   Value of y is:: 40
   Size is::4

In the above example the short data type value of x is type cast to 
an integer data type, which occupies "4" bytes.

Type casting can also done using some typecast operators available in 
C++. following are the typecast operators used in C++.

    static_cast
    const_cast
    dynamic_cast
    reinterpret_cast
    typeid

Example:

#include <iostream.h>
using namespace std;
int main()
  {
     int a = 31;
     int b = 3;
     float x = a/b;
     float y = static_cast<float>(a)/b;
     cout << "Output without static_cast = " << x << endl;
     cout << "Output with static_cast = " << y << endl;
     cout << "Type id of x = " << typeid(x).name() << '\n';
  }


Result:

   Output without static_cast = 10
   Output with static_cast = 10.3333
   Type id of x = float

In the above example we have assigned the integer variable "a" to be 
float using the static_cast operator. So the result is "10.3333". 

================================================================================
► How is static_cast operator in C++?
Sol:
    Static_Cast operator is used to convert a given expression to the 
specified type. It is used convert base class pointers to the derived 
class as well as vice versa. This is type casting in C++.
Example:

#include <iostream.h>
using namespace std;
int main()
  {
     int a = 31;
     int b = 3;
     float x = a/b;
     float y = static_cast<float>(a)/b;
     cout << "Output without static_cast = " << x << endl;
     cout << "Output with static_cast = " << y << endl;
     return 0;
  }  


Result:

   Output without static_cast = 10
   Output with static_cast = 10.3333

In the above type casting example, using the static_cast to an 
integer as "float" returns a float value.

================================================================================
► How is const_cast operator used in C++?
Sol:
    const_cast operator is used to add or remove a "const" 
modifier from a type.
Example:

#include <iostream.h>
using namespace std;
void example(const float &a)
{
     float &b = const_cast (a);
     b = 20.0;
}
int main()
{
     float c = 17.5;
     cout << "The value before const_cast is:: " << c << endl;
     example(c);
     cout << "The value after const_cast is::" << c << endl;
     return 0;
}

Result:

   The value before const_cast is:: 17.5
   The value after const_cast is:: 20

In the above example the const_cast operator is used in a function 
to assign a constant value as "20.0". So that whenever the function 
is called the "20.0" is returned. 

================================================================================
► How is dynamic_cast operator used in C++? What is RTTI Information?
Sol:
    Dynamic_Cast Operator is used with pointers and objects to do 
casting at the runtime unlike other cast operators. In order for 
this operation, the typeid operator or exceptions to work in C++, 
Run-Time Type Information (RTTI) must be enabled.
Example:

#include <iostream.h>
using namespace std;

struct X 
{
     virtual ~X() { };
};

struct Y : X { };

int main() 
{
       Y a;
       X * ptr1 = &a;
       void * ptr2 = dynamic_cast(ptr1);
       cout << "Address of ptr2:" << ptr2 << endl;
       cout << "Address of a:" << &a << endl;
}


Result:

   Address of ptr2: 0012FF88
   Address of a: 0012FF88

In the above example the dynamic_cast operator is used on a "ptr1", 
so that the address of the object "a" is assigned to "ptr2" at 
the runtime.

This operator is a part of Run-Time Type Information (RTTI).

================================================================================
► How is reinterpret_cast operator used in C++?
Sol:
    Reinterpret_cast operator is used convert a pointer of one type to 
another type even that of an unrelated class. This is type casting in C++.
Example:

#include <iostream.h>
int main()
{
     int *ptr = new int(20);
     cout << "First value = " << *ptr << endl;
     void *ptr2 = reinterpret_cast(ptr);
     int *ptr3 = reinterpret_cast(ptr2);
     cout << "Final reinterpret cast value is::" << *ptr3 << endl;
}

Result of Type Casting:

   First value = 20
   Final reinterpret cast value is:: 20

In the above example, the reinterpret_cast operator is used 
convert a integer pointer to a pointer of type "void" then 
converted into a integer pointer. 

================================================================================
► How is typeid operator used in C++?
Sol:
    typeid operator is a type casting method which is used to check 
the type of an expression. In C++, the typeid keyword is used to 
determine the class of an object at runtime.
Example:

#include <iostream.h>
#include <typeinfo.h>
int main()
{
     int a;
     char *c;
     cout << "The type of a is: " << typeid(a).name() << endl;
     cout << "The type of c is: " << typeid(c).name() << endl;
     return 0;
}

Result:

   The type of a is: int
   The type of c is: char *

In the above example the "typeid" is used to find the data type.

================================================================================
► 
